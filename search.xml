<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>感知機 PLA</title>
      <link href="/post/2022/05-12/perceptron/"/>
      <url>/post/2022/05-12/perceptron/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 資料結構 &amp; 演算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> C++ </tag>
            
            <tag> 類神經網路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BIT 樹狀樹組</title>
      <link href="/post/2022/04-01/DSA_BIT/"/>
      <url>/post/2022/04-01/DSA_BIT/</url>
      
        <content type="html"><![CDATA[<h1 id="BIT"><a href="#BIT" class="headerlink" title="BIT"></a>BIT</h1><blockquote><p>A Fenwick tree or binary indexed tree is a data structure that can efficiently update elements and calculate prefix sums in a table of numbers.<br>-wiki</p></blockquote><p>樹狀數組也稱作 Fenwick Tree 或 Binary Indexed Tree(BIT)，用來儲存資料，且可以快速求出前綴和或區間加總。對於一個長度 n 的陣列，可以在 O(n) 的時間初始化，在 O(n) 時間詢問一個前綴的訊息例如前綴和，以及在 O(n) 的時間修改其中一個值。但是 BIT 的缺點就是有些問題無法轉為前綴間的運算，無法個別操作元素。</p><p><img src="https://i.imgur.com/d611u7b.png"></p><p>由上面這張圖可了解 BIT 儲存的區間。<code>Index[]</code> 為儲存資料的陣列，<code>BIT[]</code> 為實際上儲存的區間。</p><p>通常一個數狀數組會有 3 個函式:</p><ul><li><code>uptade(idx,delta)</code>: 將 delta 加到 idx 的節點上</li><li><code>query(index)</code>: 查詢從第一個位置到 idx 的所有節點的加總</li><li><code>range_query(idx_this,idx_that)</code>: 查詢從 idx_this 到 idx_that 間所有節點的總和</li></ul><h2 id="lowbit"><a href="#lowbit" class="headerlink" title="lowbit()"></a>lowbit()</h2><p>lowbit 是為了求一個二進位數中最低位1的值(最靠近右邊的 1 的值)，構成 BIT 的核心</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x&amp;(-x);&#125;</span><br></pre></td></tr></table></figure><p>在程式碼中 -x 會是 x 的補數加 1 ，把 x 和 -x 做 and 運算，得到的數即是 x 的 lowbit。以 <code>lowbit(4)</code> 為例，4 的二進位置表示是 4(2)=0100，其補數為 ~4(2)=1011，我們便可以求出 -x=1011+1=1100，再把 0100 和 1100 進行 and 運算即可求出其 <code>lowbit(4)</code>=0100。</p><p><img src="https://i.imgur.com/i2tNBPO.png"></p><h2 id="Update-Tree"><a href="#Update-Tree" class="headerlink" title="Update Tree"></a>Update Tree</h2><p><img src="https://i.imgur.com/ISJQZSj.png"></p><p>在 Update Tree 中可以看出如何將值加到節點上。當更新一個節點時，會沿著節點間的邊(edge)向上把每個父節點(parent)都加上同樣的值。例如在一號節點上加上 5，那麼節點 2、4、8 也都會加上 5。</p><ul><li>節點 i 的父節點是 i-lowbit(i)</li></ul><h2 id="Query-Tree"><a href="#Query-Tree" class="headerlink" title="Query Tree"></a>Query Tree</h2><p><img src="https://i.imgur.com/USjovHL.png"><br>在 Query Tree 中可以看出怎麼求出該索引的前綴。查詢某索引的前綴時，回傳的值會是該索引對應節點的值沿著邊把所有祖先(ancestor)的值相加。例如要求索引 7 的前綴，回傳的值會是節點 4、6、7 的相加。</p><ul><li>節點 i 的父節點是 i+lowbit(i)</li></ul><h1 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> bit_capacity 100001</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bit</span>&#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="keyword">int</span> length;</span><br><span class="line">        <span class="comment">// 更新元素值</span></span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> delta)</span></span>;</span><br><span class="line">        <span class="comment">// 前綴和</span></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">        <span class="comment">// 區間查詢</span></span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> l)</span></span>;</span><br><span class="line">        <span class="comment">// 實際儲存的陣列</span></span><br><span class="line">        <span class="keyword">int</span> *bitree=index;</span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="keyword">return</span> x&amp;(-x);&#125;</span><br><span class="line">        <span class="keyword">int</span> index[bit_capacity];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">bit::update</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> delta)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;=length)&#123;</span><br><span class="line">        index[i]+=delta;</span><br><span class="line">        i+=<span class="built_in">lowbit</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bit::query</span><span class="params">(<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sum =<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        sum+=index[i];</span><br><span class="line">        i-=<span class="built_in">lowbit</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bit::query</span><span class="params">(<span class="keyword">int</span> f,<span class="keyword">int</span> l)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">query</span>(l)-<span class="built_in">query</span>(f);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    bit tree;</span><br><span class="line">    tree.length=<span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++) tree.<span class="built_in">update</span>(i,i);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">        std::cout&lt;&lt;<span class="string">&quot;BIT[&quot;</span>&lt;&lt;i&lt;&lt;<span class="string">&quot;]=&quot;</span>&lt;&lt;tree.bitree[i]&lt;&lt;std::endl;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 資料結構 &amp; 演算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> C++ </tag>
            
            <tag> 資料結構 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>e798 卷積神經網路</title>
      <link href="/post/2022/03-18/zj_e798/"/>
      <url>/post/2022/03-18/zj_e798/</url>
      
        <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>2019TOI1214 新手同好會 5. 卷積神經網路 (CNN)  {<a href="https://toi-reg.csie.ntnu.edu.tw/wp-content/uploads/question/201912-onsite/5-CNN.pdf">試題連結</a>}</p><h2 id="問題敘述"><a href="#問題敘述" class="headerlink" title="問題敘述"></a>問題敘述</h2><p>卷積神經網絡 (Convolutional Neural Network) 簡稱 CNN，是現在最火紅的深度學習課程必教的模型。<br>CNN 在影像識別方面非常厲害，許多影像辨識的模型都是以 CNN 的架構為基礎去做延伸。<br>CNN 分為三個部分：卷積層 (convolution layer)、池化層 (pooling layer) 和全連接層 (fully connected layer)。<br>卷積層用於提取影像特徵，池化層減小資料的空間大小，全連接層主要目的為實現分類。<br>池化層最常見的作法是最大池化法 (max pooling)，它將輸入的影像劃分為若干個 2×2 的矩形子區域，對每個子區域輸出最大值。<br>給定一個 n×n 的二維陣列，請實作最大池化演算法並輸出池化後的結果。</p><p><img src="https://zerojudge.tw/ShowImage?id=1442"><br><strong>最大池化法示意圖</strong><br>圖片來源：<a href="https://embarc.org/embarc_mli/doc/build/html/MLI_kernels/pooling_max.html">https://embarc.org/embarc_mli/doc/build/html/MLI_kernels/pooling_max.html</a></p><h2 id="輸入格式"><a href="#輸入格式" class="headerlink" title="輸入格式"></a>輸入格式</h2><p>第一行有一個正整數n（4 &lt;= n &lt;= 20，n為2的倍數），代表輸入影像邊長。接下去有n行，每行各有n個數字，數值範圍在正負 2^31 之間，以空白隔開，代表影像陣列中的資料值。</p><h2 id="輸出格式"><a href="#輸出格式" class="headerlink" title="輸出格式"></a>輸出格式</h2><p>輸出經2x2 最大池化後的結果。</p><h2 id="範例測資"><a href="#範例測資" class="headerlink" title="範例測資"></a>範例測資</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">輸入1 :</span><br><span class="line">4</span><br><span class="line">12 20 30 0</span><br><span class="line">8 12 2 0</span><br><span class="line">34 70 37 4</span><br><span class="line">112 100 25 12</span><br><span class="line"></span><br><span class="line">輸出1 :</span><br><span class="line">20 30</span><br><span class="line">112 37</span><br><span class="line"></span><br><span class="line">輸入2 :</span><br><span class="line">6 </span><br><span class="line">10 2 0 12 1 3</span><br><span class="line">21 0 13 2 2 0</span><br><span class="line">0 0 0 10 0 0</span><br><span class="line">19 2 0 13 61 1</span><br><span class="line">0 1 32 3 0 2</span><br><span class="line">9 2 0 31 11 0</span><br><span class="line"></span><br><span class="line">輸出2 :</span><br><span class="line">21 13 3</span><br><span class="line">19 13 61</span><br><span class="line">9 38 11</span><br></pre></td></tr></table></figure><h1 id="解題方向"><a href="#解題方向" class="headerlink" title="解題方向"></a>解題方向</h1><p>簡化題目後，我們可以得出題目是要我們把一個大矩陣都拆成2*2的小矩陣。然後把每個小矩陣的最大值輸出成一個新的矩陣，而這個過程被稱作池化。了解題目的要求後就簡單了，我的作法是以一個小區塊先池化，輸出後再處理下一個小區塊。</p><p><img src="https://i.imgur.com/YCcYikU.png"></p><p>如下圖所示，而實際的方法可以把輸入的影像邊常除2，再丟進迴圈裡跑。這樣迴圈每跑次就是處理一組小矩陣。<br>比較要注意的是後續處理比較四格大小的時候，要記得把迴圈索引值乘2。</p><p><img src="https://i.imgur.com/zXaq4ZH.png"></p><h1 id="參考程式碼"><a href="#參考程式碼" class="headerlink" title="參考程式碼"></a>參考程式碼</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> pool[n][n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n;j++)&#123;</span><br><span class="line">            cin&gt;&gt;pool[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> max;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n/<span class="number">2</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;n/<span class="number">2</span>;j++)&#123;</span><br><span class="line">            max=pool[<span class="number">2</span>*i][<span class="number">2</span>*j];</span><br><span class="line">            max=(pool[<span class="number">2</span>*i+<span class="number">1</span>][<span class="number">2</span>*j]&gt;max)?pool[<span class="number">2</span>*i+<span class="number">1</span>][<span class="number">2</span>*j]:max;</span><br><span class="line">            max=(pool[<span class="number">2</span>*i][<span class="number">2</span>*j+<span class="number">1</span>]&gt;max)?pool[<span class="number">2</span>*i][<span class="number">2</span>*j+<span class="number">1</span>]:max;</span><br><span class="line">            max=(pool[<span class="number">2</span>*i+<span class="number">1</span>][<span class="number">2</span>*j+<span class="number">1</span>]&gt;max)?pool[<span class="number">2</span>*i+<span class="number">1</span>][<span class="number">2</span>*j+<span class="number">1</span>]:max;</span><br><span class="line">            cout&lt;&lt;max&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解題紀錄 </category>
          
          <category> ZeroJudge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> C++ </tag>
            
            <tag> ZeroJudge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LeetCode] 69. Sqrt(x)(C++)</title>
      <link href="/post/2022/03-04/sqrtx/"/>
      <url>/post/2022/03-04/sqrtx/</url>
      
        <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given a non-negative integer <code>x</code>, compute and return the square root of <code>x</code>.</p><p>Since the return type is an integer, the decimal digits are <strong>truncated</strong>, and only <strong>the integer part</strong> of the result is returned.</p><p><strong>Note:</strong> You are not allowed to use any built-in exponent function or operator, such as <code>pow(x, 0.5)</code> or <code>x ** 0.5</code>.</p><p><strong>Example 1:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: x = 4</span><br><span class="line">Output: 2</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: x = 8</span><br><span class="line">Output: 2</span><br><span class="line">Explanation: The square root of 8 is 2.82842..., and since the decimal part is truncated, 2 is returned.</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li>0 &lt;= x &lt;= 231 - 1</li></ul><h1 id="解題方向"><a href="#解題方向" class="headerlink" title="解題方向"></a>解題方向</h1><p>連分數法求根號值，可以參考<a href="https://youtu.be/NXexkJyPoQs?t=27">李永樂老師的影片</a><br>可以得知 S=a^2+b 中的 a 會等於題目所求的答案</p><h1 id="參考程式碼"><a href="#參考程式碼" class="headerlink" title="參考程式碼"></a>參考程式碼</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mySqrt</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> count=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(count*count&gt;x)&#123;</span><br><span class="line">                <span class="keyword">return</span> temp;</span><br><span class="line">            &#125;</span><br><span class="line">            temp=count;</span><br><span class="line">            count++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解題紀錄 </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> C++ </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[LeetCode] 1. Two-Sum(C++)</title>
      <link href="/post/2022/03-04/two-sum/"/>
      <url>/post/2022/03-04/two-sum/</url>
      
        <content type="html"><![CDATA[<h1 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h1><p>Given an array of integers <code>nums</code> and an integer <code>target</code>, return indices of the two numbers such that they add up to <code>target</code>.</p><p>You may assume that each input would have <strong>exactly one solution</strong>, and you may not use the same element twice.</p><p>You can return the answer in any order.</p><p><strong>Example 1</strong>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [2,7,11,15], target = 9</span><br><span class="line">Output: [0,1]</span><br><span class="line">Explanation: Because nums[0] + nums[1] == 9, we return [0, 1].</span><br></pre></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [3,2,4], target = 6</span><br><span class="line">Output: [1,2]</span><br></pre></td></tr></table></figure><p><strong>Example 3:</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Input: nums = [3,3], target = 6</span><br><span class="line">Output: [0,1]</span><br></pre></td></tr></table></figure><p><strong>Constraints:</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 104</code></li><li><code>-109 &lt;= nums[i] &lt;= 109</code></li><li><code>-109 &lt;= target &lt;= 109</code></li><li><strong>Only one valid answer exists.</strong></li></ul><h1 id="解題方向"><a href="#解題方向" class="headerlink" title="解題方向"></a>解題方向</h1><p>用兩個 <code>for</code> 迴圈一個一個去檢查</p><h1 id="參考程式碼"><a href="#參考程式碼" class="headerlink" title="參考程式碼"></a>參考程式碼</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">twoSum</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums, <span class="keyword">int</span> target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;nums.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=i+<span class="number">1</span>;j&lt;nums.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(nums[i]+nums[j]==target)&#123;</span><br><span class="line">                    <span class="keyword">return</span> vector&lt;<span class="keyword">int</span>&gt; &#123;i,j&#125;;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解題紀錄 </category>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> C++ </tag>
            
            <tag> LeetCode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>泛洪演算法 Flood Fill Alogrithm</title>
      <link href="/post/2022/02-05/floodfill/"/>
      <url>/post/2022/02-05/floodfill/</url>
      
        <content type="html"><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>Flood Fill 演算法是從一個區域中提取若干個連通的點與其他相鄰區域區分開(或分別染成不同顏色)的經典演算法(Algorithm)。因為其思路類似洪水從一個區域擴散到所有能到達的區域而得名。</p><h1 id="實作方法"><a href="#實作方法" class="headerlink" title="實作方法"></a>實作方法</h1><ul><li>深度優先搜尋(Depth-First Search,DFS)</li><li>廣度優先搜尋(Breadth-First Search,BFS)</li></ul><h2 id="BFS-實作"><a href="#BFS-實作" class="headerlink" title="BFS 實作"></a>BFS 實作</h2><p>把最外面的點加入佇列(Queue)裡面，分別按照佇列中的點染色</p><p><img src="https://i.imgur.com/2C9pVdq.gif"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  title: flood fill algorithm</span></span><br><span class="line"><span class="comment">//   date: 2/1</span></span><br><span class="line"><span class="comment">// author: 羅崧瑋</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span>  <span class="comment">// terminal color font</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="comment">// matrix size</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> row 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> col 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 上,下,左,右</span></span><br><span class="line"><span class="keyword">int</span> nx[<span class="number">4</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> ny[<span class="number">4</span>]=&#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="comment">// pair type</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">pair</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="keyword">int</span> y;</span><br><span class="line">&#125;<span class="keyword">pair_t</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printa</span><span class="params">(<span class="keyword">int</span> a[row][col])</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// (i,j) 起始位置</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">floodfill</span><span class="params">(<span class="keyword">int</span> a[row][col],<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">int</span> newc)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 染色佇列</span></span><br><span class="line">    queue&lt;<span class="keyword">pair_t</span>&gt; pos;</span><br><span class="line">    pos.<span class="built_in">push</span>(&#123;i,j&#125;);</span><br><span class="line">    <span class="comment">// 染色</span></span><br><span class="line">    <span class="keyword">while</span>(!pos.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        <span class="keyword">auto</span> f=pos.<span class="built_in">front</span>();</span><br><span class="line">        i=f.x;</span><br><span class="line">        j=f.y;</span><br><span class="line">        pos.<span class="built_in">pop</span>();</span><br><span class="line">        <span class="comment">// 邊界檢查 &amp; 同色檢查</span></span><br><span class="line">        <span class="keyword">if</span>(a[i][j]&lt;<span class="number">0</span> || a[i][j]==newc) <span class="keyword">continue</span>;</span><br><span class="line">        a[i][j]=newc;</span><br><span class="line">        <span class="built_in">printa</span>(a);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> b=<span class="number">0</span>;b&lt;<span class="number">4</span>;b++)</span><br><span class="line">            pos.<span class="built_in">push</span>(&#123;i+nx[b],j+ny[b]&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printa</span><span class="params">(<span class="keyword">int</span> a[row][col])</span></span>&#123;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;row;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;col;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[i][j]&lt;<span class="number">0</span>)</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;\033[37;7m&quot;</span>&lt;&lt;<span class="built_in">setw</span>(<span class="number">3</span>)&lt;&lt;a[i][j]&lt;&lt;<span class="string">&quot;\033[0m&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(a[i][j]==<span class="number">5</span>)</span><br><span class="line">                cout&lt;&lt;<span class="string">&quot;\033[34;7m&quot;</span>&lt;&lt;<span class="built_in">setw</span>(<span class="number">3</span>)&lt;&lt;a[i][j]&lt;&lt;<span class="string">&quot;\033[0m&quot;</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                cout&lt;&lt;<span class="built_in">setw</span>(<span class="number">3</span>)&lt;&lt;a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="built_in">usleep</span>(<span class="number">200000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// matrix</span></span><br><span class="line">    <span class="keyword">int</span> a[row][col]=&#123;&#123;<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">                     &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">                     &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">                     &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>,<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">                     &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>,<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>,<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">                     &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>,<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>,<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">                     &#123;<span class="number">-1</span>, <span class="number">0</span>,<span class="number">-1</span>,<span class="number">-1</span>, <span class="number">0</span>,<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">                     &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">                     &#123;<span class="number">-1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>,<span class="number">-1</span>&#125;,</span><br><span class="line">                     &#123;<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line">    <span class="built_in">floodfill</span>(a,<span class="number">1</span>,<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;final :\n&quot;</span>;</span><br><span class="line">    <span class="built_in">printa</span>(a);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://www.csie.ntu.edu.tw/~sprout/algo2017/ppt_pdf/flood_fill.pdf">資訊之芽: Flood Fill Algorithm</a></li><li><a href="https://www.youtube.com/watch?v=VuiXOc81UDM">Inside code: Flood fill algorithm</a></li><li><a href="https://zh.wikipedia.org/wiki/Flood_fill">Wiki: Flood Fill</a></li><li><a href="https://www.twblogs.net/a/5d072587bd9eee1ede03920a">hn_tzy: Linux C/C++ 如何輸出彩色字體</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 資料結構 &amp; 演算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>向量 Vector(STL)</title>
      <link href="/post/2022/01-05/cpp_vector/"/>
      <url>/post/2022/01-05/cpp_vector/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在學寫C++的過程當中，從 Array 到 Vector 一直是很難跨越的障礙，<br>因為我的物件導向和指標不是學的很完善，導致會有點看不懂程式碼在做什麼，<br>所以這次我透過邊實作邊學習的方式來盡量彌補我知識上的不足，<br>順便做個筆記來記錄。</p><h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>Vector 是 C++ 標準程式庫中的一個 class，可視為會自動擴展容量的陣列，<br>是C++標準程式庫中的眾多容器(container)之一，以循序(Sequential)的方式維護變數集合，<br>使用前預先 <code>#include &lt;vector&gt;</code> 即可。</p><h2 id="特色"><a href="#特色" class="headerlink" title="特色"></a>特色</h2><ul><li>支援隨機存取</li><li>集合尾端增刪元素很快 : 常數時間 O(1)</li><li>集合中間增刪元素比較費時 : 線性時間 O(n)</li><li>以模板(泛型)方式實現，可以儲存任意類型的變數，包括使用者自定義的資料型態。</li></ul><h1 id="成員函式"><a href="#成員函式" class="headerlink" title="成員函式"></a>成員函式</h1><p>vector 類別是以容器(Container)模式為基準設計的，也就是說，基本上它有 <code>begin()</code>、<code>end()</code>、<code>size()</code>、<code>max_size()</code>、<code>empty()</code> 以及 <code>swap()</code> 這幾個方法。</p><h2 id="存取元素的方法"><a href="#存取元素的方法" class="headerlink" title="存取元素的方法"></a>存取元素的方法</h2><ul><li><code>v[i]</code> : 存取索引值為 i 的元素值 (索引值從零起算，故第一個元素是v[0]。)</li><li><code>v.at(i)</code> : 存取索引值為 i 的元素的值</li><li><code>v.front()</code> : 回傳 vector 第一個元素的值</li><li><code>v.back()</code> : 回傳 vector 最尾端元素的值</li></ul><blockquote><p>用 operator <code>[]</code> 可能會 <strong>Segmentation Fault</strong>。以 <code>at()</code> 存取會做<strong>陣列邊界檢查</strong>，如果存取越界將會拋出一個<strong>例外</strong>，這是與 operator <code>[]</code> 的唯一差異。撰寫較嚴肅、安全性較高的程式時使用 <code>at()</code>。</p></blockquote><h2 id="新增或移除元素的方法"><a href="#新增或移除元素的方法" class="headerlink" title="新增或移除元素的方法"></a>新增或移除元素的方法</h2><ul><li><code>v.push_back()</code> - 新增元素至 vector 的尾端，必要時會進行記憶體配置。</li><li><code>v.pop_back()</code> - 刪除 vector 最尾端的元素。</li><li><code>v.insert()</code> - 插入一個或多個元素至 vector 內的任意位置。</li><li><code>v.erase()</code> - 刪除 vector 中一個或多個元素。</li><li><code>v.clear()</code> - 清空所有元素。</li></ul><blockquote><p>少依賴 <code>push_back()</code> 的自動記憶體配置，不是不要用 <code>push_back()</code>，是不要讓 <code>push_back()</code> 自己判定記憶體需求，能自己要記憶體的就自己要，善用 <code>reserve()</code>、<code>resize()</code> 或建構子(constructor)引數。</p></blockquote><h2 id="取得長度-容量"><a href="#取得長度-容量" class="headerlink" title="取得長度/容量"></a>取得長度/容量</h2><p><code>v.size()</code> - 取得 vector 目前持有的元素個數。<br><code>v.empty()</code> - 如果 vector 內部為空，則傳回 true 值。<br><code>v.capacity()</code> - 取得 vector 目前可容納的最大元素個數。這個方法與記憶體的組態有關，它通常只會增加，不會因為元素被刪減而隨之減少。</p><h2 id="重新組態-重設長度"><a href="#重新組態-重設長度" class="headerlink" title="重新組態/重設長度"></a>重新組態/重設長度</h2><p><code>v.reserve()</code> - 擴大 vector 的容量大小(組態更多的記憶體)。<br><code>v.resize()</code> - 改變 vector 目前持有的元素個數。</p><blockquote><ul><li><code>reserve()</code> 的目的是<strong>擴大容量</strong>。<br>做完時，vector 的長度不變，capacity 只會長大不會縮小，資料所在位置可能會移動 (因為會重配空間)。因為 vector 一開始是空的，立刻預留顯然比填了資料後才預留省了拷貝資料的時間。</li><li><code>resize()</code> 的目的是<strong>改變 vector 的長度</strong>。<br>做完時，vector 的長度會改變為指定的大小，capacity 則視需要調整，確保不小於 size，資料所在位置可能會移動。如果變小就擦掉尾巴的資料，如果變大就補零。補零如果會超過容量，會做重配空間的動作。</li></ul></blockquote><h2 id="迭代-Iterator"><a href="#迭代-Iterator" class="headerlink" title="迭代 (Iterator)"></a>迭代 (Iterator)</h2><p><code>v.begin()</code> - 回傳一個 Iterator，它指向 vector 第一個元素。<br><code>v.end()</code> - 回傳一個 Iterator，它指向 vector 最尾端元素的下一個位置(非最末元素)。<br><code>v.rbegin()</code> - 回傳一個反向 Iterator，它指向 vector 最尾端元素的。<br><code>v.rend()</code> - 回傳一個 Iterator，它指向 vector 的第一個元素的前一個位置。</p><p><img src="https://i.imgur.com/LV9jk0s.png"></p><h1 id="使用-vector-實做"><a href="#使用-vector-實做" class="headerlink" title="使用 vector 實做"></a>使用 vector 實做</h1><p>在實際使用 vector 之前，我們必須先了解如何宣告 vector 變數。</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><p>以下即是宣告一個 <code>int</code> 型的 vector，<code>size()</code> 是 0,  <code>capacity()</code> 也是 0。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用萬用標頭檔(<code>&lt;bits/stdc++.h&gt;</code>)就可以不用再 <code>#include &lt;vector&gt;</code>。</p></blockquote><p>在初始化時可以用用 operator <code>=</code> 就把值丟進去，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; v=&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br></pre></td></tr></table></figure><p>或是使用建構子，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;)</span></span>;</span><br></pre></td></tr></table></figure><p>若要從其他容器中把值複製過來可以用 operator <code>=</code>，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; v1=&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v2=v1;</span><br></pre></td></tr></table></figure><p>同樣地也可以用建構子，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; v1=&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">v2</span><span class="params">(v1)</span></span>;</span><br></pre></td></tr></table></figure><p>還可以從 array 裡複製過來，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n[<span class="number">3</span>]=&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(n, n+<span class="number">3</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>範圍複製也是可以的，vector 的可以這樣寫，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; v1 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">v2</span><span class="params">(v1.begin()+<span class="number">2</span>, v1.end()<span class="number">-1</span>)</span></span>; <span class="comment">// &#123;3, 4&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>array 的可以這樣寫，</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> n[<span class="number">5</span>] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"><span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">v</span><span class="params">(n+<span class="number">2</span>, n+<span class="number">4</span>)</span></span>; <span class="comment">// &#123;3, 4&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="存取元素的方法-1"><a href="#存取元素的方法-1" class="headerlink" title="存取元素的方法"></a>存取元素的方法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; v=&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">cout&lt;&lt;v[<span class="number">1</span>]&lt;&lt;endl;   <span class="comment">// 2</span></span><br><span class="line">cout&lt;&lt;v.<span class="built_in">at</span>(<span class="number">2</span>)&lt;&lt;endl;   <span class="comment">// 3</span></span><br><span class="line">cout&lt;&lt;v.<span class="built_in">front</span>()&lt;&lt;endl;   <span class="comment">// 1</span></span><br><span class="line">cout&lt;&lt;v.<span class="built_in">back</span>()&lt;&lt;endl;   <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><h2 id="新增或移除元素的方法-1"><a href="#新增或移除元素的方法-1" class="headerlink" title="新增或移除元素的方法"></a>新增或移除元素的方法</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; v=&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">v.<span class="built_in">push_back</span>(<span class="number">5</span>); <span class="comment">// &#123;1, 2, 3, 4, 5&#125;</span></span><br><span class="line">v.<span class="built_in">pop_back</span>();   <span class="comment">// &#123;1, 2, 3, 4&#125;</span></span><br><span class="line">v.<span class="built_in">insert</span>(<span class="number">2</span>,<span class="number">5</span>);  <span class="comment">// &#123;1, 2, 5, 3, 4&#125;</span></span><br><span class="line">v.<span class="built_in">erase</span>(<span class="number">2</span>);     <span class="comment">// &#123;1, 2, 3, 4&#125;</span></span><br><span class="line">v.<span class="built_in">clear</span>();      <span class="comment">// 此時所有元素被清空，但 capacity 為 5</span></span><br></pre></td></tr></table></figure><h3 id="用-swap-刪除元素"><a href="#用-swap-刪除元素" class="headerlink" title="用 swap() 刪除元素"></a>用 swap() 刪除元素</h3><p>成員函式 swap()，這個函式用來交換兩個 vector 容器中的元素。<br>因此可以與一個具有相同資料類型的內容為空的局部變數swap，從而實現徹底刪除元素、釋放容量的目的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; v1=&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v2;</span><br><span class="line">v1.<span class="built_in">swap</span>(v2);    <span class="comment">// v1 內的元素與 v2 交換，即 v1 內所有元素被刪除</span></span><br></pre></td></tr></table></figure><h2 id="長度-容量以及配置大小"><a href="#長度-容量以及配置大小" class="headerlink" title="長度/容量以及配置大小"></a>長度/容量以及配置大小</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; v=&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line">v.<span class="built_in">reserve</span>(<span class="number">10</span>);  <span class="comment">// 把 capacity 擴大為 10</span></span><br><span class="line">cout&lt;&lt;v.<span class="built_in">size</span>()&lt;&lt;endl;   <span class="comment">// 4</span></span><br><span class="line">cout&lt;&lt;v.<span class="built_in">capacity</span>()&lt;&lt;endl;   <span class="comment">// 10</span></span><br><span class="line">cout&lt;&lt;v.<span class="built_in">empty</span>()&lt;&lt;endl;  <span class="comment">// 0</span></span><br><span class="line">v.<span class="built_in">clear</span>();</span><br><span class="line">cout&lt;&lt;v.<span class="built_in">empty</span>()&lt;&lt;endl;  <span class="comment">// 1</span></span><br><span class="line">v.<span class="built_in">resize</span>(<span class="number">2</span>);    <span class="comment">// &#123;1, 2, 3, 4, 0, 0&#125;</span></span><br></pre></td></tr></table></figure><h2 id="尋訪元素"><a href="#尋訪元素" class="headerlink" title="尋訪元素"></a>尋訪元素</h2><p>尋訪元素除了像陣列那樣寫以外，還可以用疊代器寫</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; v=&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;v.<span class="built_in">size</span>(); i++) cout &lt;&lt; v[i] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;v.<span class="built_in">size</span>(); i++) cout &lt;&lt; v.<span class="built_in">at</span>(i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;endl;</span><br><span class="line"></span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"><span class="keyword">for</span>(it=v.<span class="built_in">begin</span>(); it!=v.<span class="built_in">end</span>(); ++it) cout &lt;&lt; *it &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">cout&lt;&lt;endl;</span><br></pre></td></tr></table></figure><h2 id="vector-assign"><a href="#vector-assign" class="headerlink" title="vector::assign()"></a>vector::assign()</h2><p><code>vector::assign()</code> 是 C++ 中的 STL，它通過替換舊元素為向量元素分配新值。如果需要，它也可以修改向量的大小。</p><h3 id="分配常量值"><a href="#分配常量值" class="headerlink" title="分配常量值"></a>分配常量值</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">assign</span>(<span class="number">5</span>, <span class="number">10</span>);   <span class="comment">// &#123;10, 10, 10, 10 ,10&#125;</span></span><br></pre></td></tr></table></figure><h3 id="從-array-或-vector-分配值"><a href="#從-array-或-vector-分配值" class="headerlink" title="從 array 或 vector 分配值"></a>從 array 或 vector 分配值</h3><p>除了上面有提過用 operator <code>=</code> 或建構子的方式在初始化時賦值，<br>也可以透過 <code>assign()</code> 來執行。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">5</span>]=&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line">vector&lt;<span class="keyword">int</span>&gt; v2;</span><br><span class="line"></span><br><span class="line">v1.<span class="built_in">assign</span>(a,a+<span class="number">4</span>);   <span class="comment">// &#123;1, 2, 3, 4&#125;</span></span><br><span class="line">v2.<span class="built_in">assign</span>(v1.<span class="built_in">begin</span>(),v1.<span class="built_in">begin</span>()+<span class="number">2</span>); <span class="comment">// &#123;1, 2&#125;</span></span><br></pre></td></tr></table></figure><h3 id="修改-vector"><a href="#修改-vector" class="headerlink" title="修改 vector"></a>修改 vector</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">v.<span class="built_in">assign</span>(<span class="number">5</span>, <span class="number">10</span>);    <span class="comment">// &#123;10, 10, 10, 10 ,10&#125;</span></span><br><span class="line">v.<span class="built_in">assign</span>(v.<span class="built_in">begin</span>(), v.<span class="built_in">begin</span>() + <span class="number">3</span>); <span class="comment">// &#123;10, 10, 10&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><ul><li><a href="https://mropengate.blogspot.com/2015/07/cc-vector-stl.html">Mr. Opengate: C/C++ - Vector (STL) 用法與心得完全攻略</a></li><li><a href="https://shengyu7697.github.io/std-vector/">ShengYu Talk: C++ std::vector 用法與範例</a></li><li><a href="https://zh.wikipedia.org/wiki/Vector_(STL)">Wiki 維基百科: Vector (STL)</a></li><li><a href="https://vimsky.com/zh-tw/examples/usage/vector-assign-in-c-stl.html">純淨天空: C++ vector::assign()用法及代碼示例</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> STL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> C++ </tag>
            
            <tag> vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鏈接串列 Linked List</title>
      <link href="/post/2022/01-01/cpp_linkedlist/"/>
      <url>/post/2022/01-01/cpp_linkedlist/</url>
      
        <content type="html"><![CDATA[<h1 id="簡介"><a href="#簡介" class="headerlink" title="簡介"></a>簡介</h1><p>何謂<strong>鏈接串列(Linked List)</strong>?串列是一種常見的資料結構，<br>使用節點儲存資料，且透過接點的指標指向下一個節點，<br>形成一串記憶體位置不相連的資料串。</p><p><img src="https://i.imgur.com/qkADZ5a.png"></p><h1 id="Linked-List-vs-Array"><a href="#Linked-List-vs-Array" class="headerlink" title="Linked List vs Array"></a>Linked List vs Array</h1><h3 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h3><p><strong>Pros</strong></p><ul><li>random access：只要利用<strong>index</strong>即可在<code>O(1)</code>時間對<strong>Array</strong>的資料做存取。</li><li>較Linked list為節省記憶體空間：因為<strong>Linked list</strong>需要多一個<strong>pointer</strong>來記錄下一個節點的記憶體位置。</li></ul><p><strong>Cons</strong></p><ul><li>新增/刪除資料很麻煩：若要在第一個位置新增資料，就需要<code>O(N)</code>時間把矩陣中所有元素往後移動。同理，若要刪除第一個位置的資料，也需要<code>O(N)</code>時間把矩陣中剩餘的元素往前移動。</li><li>若資料數量時常在改變，要時常調整矩陣的大小，會花費<code>O(N)</code>的時間在搬動資料(把資料從舊的矩陣移動到新的矩陣)。</li></ul><p><strong>適用時機</strong></p><ul><li>希望能夠快速存取資料。</li><li>已知欲處理的資料數量，便能確認矩陣的大小。</li><li>要求記憶體空間的使用越少越好。</li></ul><h3 id="Linked-List"><a href="#Linked-List" class="headerlink" title="Linked List"></a>Linked List</h3><p><strong>Pros</strong></p><ul><li>新增/刪除資料較<strong>Array</strong>簡單，只要對<code>O(1)</code>個節點調整<strong>pointer</strong>即可，不需要如同<strong>Array</strong>般搬動其餘元素。</li><li>Linked list的資料數量可以是動態的，不像<strong>Array</strong>會有resize的問題。</li></ul><p><strong>Cons</strong></p><ul><li>因為<strong>Linked list</strong>沒有<strong>index</strong>，若要找到特定節點，需要從頭(Node *first)開始找起，搜尋的時間複雜度為<code>O(N)</code>。</li><li>需要額外的記憶體空間來儲存<strong>pointer</strong>。</li></ul><p><strong>適用時機</strong></p><ul><li>無法預期資料數量時，使用<strong>Linked list</strong>就沒有resize的問題。</li><li>需要頻繁地新增/刪除資料時。</li><li>不需要快速查詢資料。</li></ul><h1 id="用-class-實作"><a href="#用-class-實作" class="headerlink" title="用 class 實作"></a>用 class 實作</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::cout;</span><br><span class="line"><span class="keyword">using</span> std::endl;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Linkedlist</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        <span class="keyword">int</span> data;</span><br><span class="line">        Node *next;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">Node</span>():<span class="built_in">data</span>(<span class="number">0</span>),<span class="built_in">next</span>(<span class="number">0</span>)&#123;&#125;;</span><br><span class="line">        <span class="built_in">Node</span>(<span class="keyword">int</span> x):<span class="built_in">data</span>(x),<span class="built_in">next</span>(<span class="number">0</span>)&#123;&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LinkedList</span>&#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">        Node *first;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="built_in">LinkedList</span>():<span class="built_in">first</span>(<span class="number">0</span>)&#123;&#125;;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">printlist</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">push_front</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">erase</span><span class="params">(<span class="keyword">int</span> x)</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">reverse</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LinkedList::printlist</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(first==<span class="number">0</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;List is empty.\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Node *current=first;</span><br><span class="line">    <span class="keyword">while</span>(current!=<span class="number">0</span>)&#123;</span><br><span class="line">        cout&lt;&lt;current-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">        current=current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LinkedList::push_front</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    Node *newNode=<span class="keyword">new</span> <span class="built_in">Node</span>(x);</span><br><span class="line">    newNode-&gt;next=first;</span><br><span class="line">    first=newNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LinkedList::push_back</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    Node *newNode=<span class="keyword">new</span> <span class="built_in">Node</span>(x);</span><br><span class="line">    <span class="keyword">if</span>(first==<span class="number">0</span>)&#123;</span><br><span class="line">        first=newNode;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Node *current=first;</span><br><span class="line">    <span class="keyword">while</span>(current-&gt;next!=<span class="number">0</span>)&#123;</span><br><span class="line">        current=current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    current-&gt;next=newNode;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LinkedList::erase</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line">    Node *current=first;</span><br><span class="line">    Node *previous=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(current!=<span class="number">0</span>&amp;&amp;current-&gt;data!=x)&#123;</span><br><span class="line">        previous=current;</span><br><span class="line">        current=current-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(current==<span class="number">0</span>)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="string">&quot;There&#x27;s no &quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot; in list.\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(current=first)&#123;</span><br><span class="line">        first=current-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> current;</span><br><span class="line">        current=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        previous-&gt;next=current-&gt;next;</span><br><span class="line">        <span class="keyword">delete</span> current;</span><br><span class="line">        current=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LinkedList::clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Node *current=first;</span><br><span class="line">    first=first-&gt;next;</span><br><span class="line">    <span class="keyword">delete</span> current;</span><br><span class="line">    current=<span class="number">0</span>;   </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LinkedList::reverse</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(first==<span class="number">0</span>||first-&gt;next==<span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    Node *previous=<span class="number">0</span>,</span><br><span class="line">         *current=first,</span><br><span class="line">         *preceding=first-&gt;next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(preceding!=<span class="number">0</span>)&#123;</span><br><span class="line">        current-&gt;next=previous;</span><br><span class="line">        previous=current;</span><br><span class="line">        current=preceding;</span><br><span class="line">        preceding=preceding-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    current-&gt;next=previous;</span><br><span class="line">    first=current;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LinkedList list;</span><br><span class="line">    list.<span class="built_in">push_front</span>(<span class="number">1</span>);</span><br><span class="line">    list.<span class="built_in">push_front</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    list.<span class="built_in">printlist</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p><a href="http://alrightchiu.github.io/SecondRound/linked-list-introjian-jie.html">http://alrightchiu.github.io/SecondRound/linked-list-introjian-jie.html</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 資料結構 &amp; 演算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> C++ </tag>
            
            <tag> 資料結構 </tag>
            
            <tag> Linked List </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0x0001 - Big O Notation, Time Complexity &amp; Space Complexity</title>
      <link href="/post/2021/10-02/DSA_0x0001/"/>
      <url>/post/2021/10-02/DSA_0x0001/</url>
      
        <content type="html"><![CDATA[<h1 id="如何衡量算法優劣"><a href="#如何衡量算法優劣" class="headerlink" title="如何衡量算法優劣 ?"></a>如何衡量算法優劣 ?</h1><p>一個問題通常會有很多種方法可以解決，選擇出最適合的方法才可以最有效的解決問題<br>而如何衡量演算法的好壞 ? 我們可以透過兩個指標去衡量:</p><ul><li>時間複雜度 (<code>Time Complexity</code>)</li><li>空間複雜度 (<code>Space Complexity</code>)</li></ul><p>時間複雜度 (Time Complexity) 也稱作效能或效率，<br>在處理資料不多的情況下，演算法的效率問題基本是無感<br>但一旦資料量變的很多，這個問題就會放大到誰也無法忽視。<br>演算法的效率除了影像執行速度以外，同時也間接影響了使用者的觀感<br>以影音平台為例，你能夠想像搜尋一部影片要花上大量的時間才能找到<br>如果是我乾脆就不等了。</p><p>而空間複雜度 (Space Complexity) 就是演算法在執行的過程中所占用的儲存空 (Memory)，<br>每一台電腦基本上都會有儲存空間的上限，所以當演算法所消耗的儲存空間，<br>大到超出電腦的，程式就會面臨無法執行的冏境。</p><h1 id="時間複雜度-Time-Complexity"><a href="#時間複雜度-Time-Complexity" class="headerlink" title="時間複雜度 (Time Complexity)"></a>時間複雜度 (Time Complexity)</h1><p>什麼是時間複雜度？時間複雜度是指程式碼運行所消耗的時間，<br>所以當我們執行程式所消耗的時間越少，其效率越高。</p><p>在分析時間複雜度前，有兩個名詞要注意一下</p><ul><li>Basic Operation  程式碼裡面執行最多次的動作，例: 比較、宣告、運算</li><li>Input Size 需要被解決的問題的大小（資料量）</li></ul><p>我們這邊有一個計算次方的程式，就用它來當範例進行說明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">square</span><span class="params">(<span class="keyword">int</span> number,<span class="keyword">int</span> times)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> result=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;times;i++)&#123;</span><br><span class="line">        result*=number;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這個程式裡面，被執行最多次的動作是<code>乘 (*)</code>，<br>所以 <code>Basic Operation</code> 就會是 <code>乘 (*)</code>，而迴圈的執行次數取決於 <code>time</code><br><code>time</code> 即為 <code>Input Size</code></p><p>接著我們要去推估理論上的效率，我們可以知道 <code>消耗時間 ≈ 一次執行時間 × 次數</code><br>便可以列出式子: <code>T(n) ≈ Cop × C(n)</code></p><ul><li>T(n) 跑完一次程式消耗的時間</li><li>Cop 一次 <code>Basic Operation</code> 執行的時間</li><li>C(n) 為 <code>Basic Operation</code> 執行的次數</li><li>n 就是<code>Input Size</code></li></ul><h2 id="執行的三種狀況"><a href="#執行的三種狀況" class="headerlink" title="執行的三種狀況"></a>執行的三種狀況</h2><p>我們每次執行演算法的狀況不同，時間也不會相同<br>但大致上可以分為三種情況<br>我們這邊用循序搜尋法 (Sequential Search) 來說明</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SequentialSearch</span><span class="params">(<span class="keyword">int</span> *array,<span class="keyword">int</span> target)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="built_in"><span class="keyword">sizeof</span></span>(array);i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(target==array[i]) retrun i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Best-Case"><a href="#Best-Case" class="headerlink" title="Best Case"></a>Best Case</h3><p>演算法的最佳狀況，以這個例子來說便是當 <code>target</code> 在陣列中的第一個元素的時候<br>我們只要檢查一次就好，以上面的例子來說，也就是 <code>C(n)</code> 等於 1 的時候<br>時間複雜度 <code>T(n) = Cop</code></p><h3 id="Average-Case"><a href="#Average-Case" class="headerlink" title="Average Case"></a>Average Case</h3><p>演算法執行時平均遇到的情況，也就是所有狀況執行時間的平均。<br>要探討 <code>Average Case</code> 最困難的是，必去得去設想<strong>所有的狀況</strong>，<br>以循序搜尋法來說便是 <code>target</code> 在陣列每一個元素(Element)時的 <code>C(n)</code> 的平均，<br>也就是 <code>C(n)=(1+2+3+4+...+n)÷n</code>，時間複雜度 <code>T(n) = Cop × ((1+2+3+4+...+n)÷n)</code></p><div class="note warning no-icon flat"><p>通常在討論演算法的效率時，並不會著重於 <code>Average Case</code> ，<br>如同上述，需要討論的情況太多了，在現實中很難去做到</p></div><h3 id="Worst-Case"><a href="#Worst-Case" class="headerlink" title="Worst Case"></a>Worst Case</h3><p>演算法執行時耗費時間最多情況，也就是 <code>target</code> 在陣列的最後一個元素(Element)，<br>或著根本不在陣列中，此時的 <code>C(n)</code> 會等於陣列的長度 <code>Sizeof(array)</code>，<br>此時的時間複雜度 <code>T(n) = Cop × C(n)</code></p><h2 id="Big-O"><a href="#Big-O" class="headerlink" title="Big O"></a>Big O</h2><p>由於程式碼在執行指令的時間幾乎沒什麼差別(都很快)，所以在執行程式時 <code>Cop</code> 對於時間影響的程度並沒有想像中的那麼顯著，也就是說，我們在比較演算法的執行效率時，最主要是針對 <code>C(n)</code> 來進行討論，而在數學當中，我們會用 <code>Big O</code> 來表示簡化後的時間複雜度</p><p><code>Big O</code> 是用一個更簡單的函數來表達一個方程式（函數）的漸進上界，<br>假設現在有一個方程式為<code>2*n^3 + 5*n^2 + 10</code>，當 n 無限靠近 ∞ 時，<br>2n^3 會慢慢地佔據了這個方程式整體走向的主導地位，進而使方程式中的其他部位可以被忽略，<br>就有了簡化之後的結果，而因為在比較演算法效率時，n 的值基本上都會被視為 ∞，<br>因此 <code>Big O</code> 非常適合用來分析時間複雜度</p><p>一般常見的 <code>Big O</code> 有以下幾種類別 (小到大排列)</p><table><thead><tr><th>Big O</th><th>類別</th></tr></thead><tbody><tr><td>O(1)</td><td>常數時間</td></tr><tr><td>O(logn)</td><td>對數時間</td></tr><tr><td>O(n)</td><td>線性時間</td></tr><tr><td>O(n*logn)</td><td>線性對數時間</td></tr><tr><td>O(n^2)</td><td>二次時間</td></tr><tr><td>O(n^3)</td><td>三次時間</td></tr><tr><td>O(2^n)</td><td>指數時間</td></tr><tr><td>O(n!)</td><td>階乘時間</td></tr></tbody></table><p><img src="https://i.imgur.com/2DbSebQ.png"></p><div class="note info no-icon flat"><p>圖片來源: <a href="https://www.bigocheatsheet.com/">https://www.bigocheatsheet.com/</a></p></div><h1 id="空間複雜度-Space-Complexity"><a href="#空間複雜度-Space-Complexity" class="headerlink" title="空間複雜度 (Space Complexity)"></a>空間複雜度 (Space Complexity)</h1><p>空間複雜度指的是程式佔用記憶體的空間，一樣可以透過 Big O 來表示</p><p>時間複雜度和空間複雜度之間有時有 trade-off 存在，<br>也就是為了提升時間複雜度（提升處理效率）必須犧牲空間複雜度；<br>有時則需要為了空間複雜度（減少記體體的消耗）而犧牲時間複雜度</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 資料結構 &amp; 演算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> 演算法 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vim</title>
      <link href="/post/2021/09-25/vim/"/>
      <url>/post/2021/09-25/vim/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>Vim 是一個語言 不只是一個編輯器</p></blockquote><p>想成為一位優秀的工程師 我認為 Vim 是不可或缺的<br>大部分的人編寫程式通常都是用市面上的 IDE 去撰寫<br>但是當你到了一個陌生的環境 突然必須得寫程式<br>電腦裡面未必會有你習慣的編輯器 但是幾乎都有 Vim ( 除了 Windows 以外啦哈哈<br>而且他可以直接在終端機裡面操作<br>如過你只是想稍微修改一下某個檔案 或是想要有個簡單的編輯器<br>不想等 IDE 開個老半天<br>Vim 便會是個非常好的選擇</p><p>當然 Vim 不只是方便而已<br>它可以讓你手不離開鍵盤完成所有編輯工作 即所謂人鍵一體<br>可以直接讓你工作效率翻倍</p><h1 id="在-Windows-安裝-Vim"><a href="#在-Windows-安裝-Vim" class="headerlink" title="在 Windows 安裝 Vim"></a>在 Windows 安裝 Vim</h1><p>Unix 和 類 Unix 系統 ( Linux, MacOS… ) 裡面幾乎都有內建 Vim<br>不然就是安裝一下套件就有了<br>就 Windows 系統最麻煩 還要另外安裝<br>不過為了成為一位優秀的工程師 花點小時間也是 OK 的</p><h2 id="下載安裝檔"><a href="#下載安裝檔" class="headerlink" title="下載安裝檔"></a>下載安裝檔</h2><p>除了到 <a href="https://www.vim.org/">Vim 官網</a> 下載以外<br>還可以透過 <a href="https://github.com/vim/vim-win32-installer">Vim 的 github</a> 下載</p><p>首先先點到 <a href="https://github.com/vim/vim-win32-installer">Vim 的 github</a> 頁面<br>滑鼠滾到到底下會有一個 <code>README.md</code><br>而內容的最上面有一排標籤 點 Download 跳轉到下載頁面</p><p>接著選擇 64 位原版本的下載</p><p><img src="https://i.imgur.com/OfHYrIT.png"></p><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>基本上一直點下一步就好<br>不過在選取安裝的類型記得要點 <code>完全安裝</code></p><p><img src="https://i.imgur.com/FqqFfEt.png"></p><h1 id="美化-Vim"><a href="#美化-Vim" class="headerlink" title="美化 Vim"></a>美化 Vim</h1><div class="note primary flat"><p>待補</p></div><h1 id="Vim-基礎操作"><a href="#Vim-基礎操作" class="headerlink" title="Vim 基礎操作"></a>Vim 基礎操作</h1><h2 id="指令流程"><a href="#指令流程" class="headerlink" title="指令流程"></a>指令流程</h2><ol><li>開啟終端機</li><li><code>vim &lt;檔案名稱&gt;</code></li><li><code>[i]</code> 進入插入模式</li><li>編輯檔案</li><li><code>[ESC]</code> 回到普通模式</li><li><code>:qw</code> 儲存並退出</li></ol><h2 id="普通模式"><a href="#普通模式" class="headerlink" title="普通模式"></a>普通模式</h2><h2 id="插入模式"><a href="#插入模式" class="headerlink" title="插入模式"></a>插入模式</h2><h2 id="命令行模式"><a href="#命令行模式" class="headerlink" title="命令行模式"></a>命令行模式</h2>]]></content>
      
      
      <categories>
          
          <category> GNU開發 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NodeMCU V3 編寫程式 &amp; 連接網路</title>
      <link href="/post/2021/09-25/esp-12f_01/"/>
      <url>/post/2021/09-25/esp-12f_01/</url>
      
        <content type="html"><![CDATA[<h1 id="NodeMCU"><a href="#NodeMCU" class="headerlink" title="NodeMCU"></a>NodeMCU</h1><p>NodeMCU是一個開源的物聯網平台。 它使用Lua手稿語言編程。該平台基於eLua 開源專案,底層使用ESP8266 sdk 0.9.5版本。該平台使用了很多開源專案, 例如 lua-cjson, spiffs. NodeMCU包含了可以執行在 esp8266 Wi-Fi SoC晶片之上的韌體,以及基於ESP-12模組的硬體。(<a href="https://zh.wikipedia.org/wiki/NodeMCU">維基百科</a>)</p><h1 id="在-Arduino-IDE-編寫程式"><a href="#在-Arduino-IDE-編寫程式" class="headerlink" title="在 Arduino IDE 編寫程式"></a>在 Arduino IDE 編寫程式</h1><p>首先你需要先按裝 Arduino IDE<br>所以沒安裝得趕快去下載一個安裝</p><h2 id="偏好設定"><a href="#偏好設定" class="headerlink" title="偏好設定"></a>偏好設定</h2><p>Arduino IDE預設是沒有ESP8288的開發板可以選擇的<br>所以我們必須要增加額外的設定才能用 NodeMCU 進行開發</p><p>開啟 Arduino IDE 後<br>點左上角 <code>檔案</code> 裡面的 <code>偏好設定</code></p><p><img src="https://i.imgur.com/FFCNsGL.png"><br>接著在 <code>額外的開發板管理員網址</code> 貼上以下網址</p><p><a href="http://arduino.esp8266.com/stable/package_esp8266com_index.json">http://arduino.esp8266.com/stable/package_esp8266com_index.json</a><br>然後按下確定</p><p><img src="https://i.imgur.com/pUNgtdJ.png"></p><p>然後點 <code>工具 &gt; 開發版 &gt; 開發版管理員</code></p><p><img src="https://i.imgur.com/4VJQR6s.png"><br>在搜尋欄裡輸入 <code>esp8266</code> 並安裝</p><p><img src="https://i.imgur.com/HxHPYCU.png"></p><h2 id="連接開發板"><a href="#連接開發板" class="headerlink" title="連接開發板"></a>連接開發板</h2><p>把板子接上電腦後<br>選擇對應的開發板和連接的序列埠</p><p><img src="https://i.imgur.com/aMQEFVx.png"><br><img src="https://i.imgur.com/141tmOu.png"></p><h2 id="第一個程式"><a href="#第一個程式" class="headerlink" title="第一個程式"></a>第一個程式</h2><div class="note info flat"><p>NodeMCU 內建的 LED 亮是低電壓、暗是高電壓 跟一般點亮 LED 相反</p></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * BLINK</span></span><br><span class="line"><span class="comment"> * 讓 NodemMCU 上的藍色 LED 閃爍</span></span><br><span class="line"><span class="comment"> * 這邊用 LED_LED_BUILTIN 來找內建 LED 的腳位</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  pinMode(LED_BUILTIN, OUTPUT);     <span class="comment">// 初始化 LED_BUILTIN 針腳為輸出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  digitalWrite(LED_BUILTIN, LOW);   <span class="comment">// 讓 LED 亮</span></span><br><span class="line">  delay(<span class="number">1000</span>);                      <span class="comment">// 延遲 1 秒</span></span><br><span class="line">  digitalWrite(LED_BUILTIN, HIGH);  <span class="comment">// 讓 LED 暗</span></span><br><span class="line">  delay(<span class="number">2000</span>);                      <span class="comment">// 延遲 2 秒</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把程式複製到 Arduino IDE 裡面<br>點左上角勾勾旁邊的箭頭 就可以把程式編譯到開發板裡面了</p><h1 id="連接網路"><a href="#連接網路" class="headerlink" title="連接網路"></a>連接網路</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;ESP8266WiFi.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* ssid = <span class="string">&quot;&lt;網路SSID&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span>* password = <span class="string">&quot;&lt;密碼&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Serial.begin(<span class="number">115200</span>);</span><br><span class="line">    Serial.print(<span class="string">&quot;連接到 &quot;</span>);</span><br><span class="line">    Serial.println(ssid);</span><br><span class="line">    WiFi.begin(ssid, password);   <span class="comment">// 連接網路</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (WiFi.status() != WL_CONNECTED) &#123;   <span class="comment">// 等待網路連接</span></span><br><span class="line">        delay(<span class="number">500</span>);</span><br><span class="line">        Serial.print(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Serial.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    Serial.println(<span class="string">&quot;成功連接&quot;</span>);</span><br><span class="line">    Serial.print(<span class="string">&quot;IP 位置: &quot;</span>);</span><br><span class="line">    Serial.println(WiFi.localIP());   <span class="comment">// 列印出被路由器分配到的 IP</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(WiFi.status() == WL_CONNECTED) &#123;   <span class="comment">// 檢查是否連接到網路</span></span><br><span class="line">        Serial.println(<span class="string">&quot;可以嘗試 PING NodeMCU&quot;</span>);</span><br><span class="line">        delay(<span class="number">20000</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        Serial.println(<span class="string">&quot;失去連接&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>將程式碼複製到 Arduino IDE 後<br>把上面的 <code>&lt;網路SSID&gt;</code>、<code>&lt;密碼&gt;</code> 改成目標 WIFI 的 SSID 和密碼<br>點 Arduino IDE 右上角的放大鏡圖示 開啟 <code>序列埠監控視窗</code><br>把鮑率設定成 <code>115200 baud</code></p><p><img src="https://i.imgur.com/QdPID7e.png"><br>接著上傳程式碼<br>輸出結果大概會像這樣</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">連接到 MyNet 2.4G</span><br><span class="line">.......</span><br><span class="line">成功連接</span><br><span class="line">IP 位置: 192.168.50.152</span><br><span class="line">可以嘗試 PING NodeMCU</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> NodeMCU </tag>
            
            <tag> Hack Life </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ 的基本架構 &amp; 執行</title>
      <link href="/post/2021/09-24/cpp_0x0001/"/>
      <url>/post/2021/09-24/cpp_0x0001/</url>
      
        <content type="html"><![CDATA[<h1 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World!"></a>Hello World!</h1><div class="note info no-icon flat"><p>於1972年，貝爾實驗室成員 Brian Kernighan 撰寫的內部技術檔案<br>《A Tutorial Introduction to the Language B》首次提到了 Hello World 這字串<br>當時 他使用B語言撰寫了第一個使用參數的 Hello World 相關程式<br>這個程式成為了第一個 Hello World 的示範程式<br>兩年後 Brian Kernighan 和 Dennis Ritchie 基於B語言寫成C語言後<br>在他們撰寫的《C程式設計語言》使用更簡單的方式展示 Hello World<br>自此 Hello World成為了電腦程式員學習新的程式語言的傳統</p></div><p>說到學習程式語言的第一個程式碼應該就是 Hello World 了吧，<code>C++</code> 的 Hello World 就長得像下面那樣把它丟去編譯就會在終端機上印出 Hello World 的字樣。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span> <span class="comment">//引入輸入輸出函式庫</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;Hello World!&quot;</span>;  <span class="comment">//輸出 Hello World!</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   <span class="comment">//回傳 0 給系統</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>C++</code> 程式裡面，可能會有很多函式，但裡面一定會有一個 <code>main</code> 函式 aka. 主函式。作業系統會呼叫 <code>main</code> 函式來執行 <code>C++</code> 程式，接著便會從上至下執行<strong>大括號</strong>裡面的程式碼。</p><div class="note warning flat"><p>每行程式碼後面都要加分號 代表這行程式碼的結束</p></div><p>在這個例子中便是輸出 Hello World!</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">std::cout&lt;&lt;<span class="string">&quot;Hello World!&quot;</span>;    <span class="comment">//輸出 Hello World!</span></span><br></pre></td></tr></table></figure><p>而在大括號內的最後一行</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">return</span> <span class="number">0</span>;    <span class="comment">//回傳 0 給系統</span></span><br></pre></td></tr></table></figure><p>最後一行的 <code>return 0;</code> 最主要的功能是代表 <code>main</code> 函式的結束，其回傳值表示程式如何結束，通常回傳值是 0 代表正常結束。</p><p><code>return 0;</code> 在 C++ 裡面可加可不加，不過建議還是加一下會比較好 養成一個好習慣。</p><h1 id="編譯"><a href="#編譯" class="headerlink" title="編譯"></a>編譯</h1><p>在撰寫完成 <code>C++</code> 程式之後，並沒有辦法執行程式，<br>程式碼必須傳換成電腦看得懂的機器語言，電腦才能執行。</p><h2 id="編譯語言"><a href="#編譯語言" class="headerlink" title="編譯語言"></a>編譯語言</h2><p>C++即是編譯語言的一種<br>編譯語言在程序執行時<br>先會透過 <code>編譯器</code> 將你的程序編譯成電腦看得懂的 <code>機器碼</code><br>接著才交給電腦執行<br>擁有高效能的執行速度等特性</p><p><u>編譯語言</u> — Ada、C、C++、D、Objective-C、C# …</p><h2 id="直譯語言"><a href="#直譯語言" class="headerlink" title="直譯語言"></a>直譯語言</h2><p>這種類型的程式語言 不同於編譯語言<br>會一行一行的動態將程式碼直譯為 <code>機器碼</code> 並執行<br>具有靈活的型別處理 動態生成與程式彈性<br>但速度會比編譯式語言要慢一些</p><p><u>直譯語言</u> — JavaScript、Python、Ruby、PHP …</p><h2 id="C-的編譯"><a href="#C-的編譯" class="headerlink" title="C++的編譯"></a>C++的編譯</h2><p>一般編譯程式碼除了用編譯器以外 還可以用<code>整合開發環境 (IDE)</code><br>以編譯 C++ 來說，可以使用: <a href="https://sourceforge.net/projects/orwelldevcpp/">Dev-C++</a>、<a href="https://www.codeblocks.org/">Code::Blocks</a>，不過我還是比較習慣用 <a href="https://gcc.gnu.org/">GCC</a>。如果懶得裝這些有的沒的，也可以使用線上編譯器 <a href="https://www.onlinegdb.com/online_c++_compiler">Online GDb</a> 。</p><p>以下為在 Windows 終端機中使用 <a href="https://gcc.gnu.org/">GCC</a> 編譯並執行 C++ 程式的示範</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">g++ &lt;檔名&gt;.cpp</span><br><span class="line">./a.exe</span><br></pre></td></tr></table></figure><h1 id="常見的編譯錯誤"><a href="#常見的編譯錯誤" class="headerlink" title="常見的編譯錯誤"></a>常見的編譯錯誤</h1><h2 id="沒加分號"><a href="#沒加分號" class="headerlink" title="沒加分號"></a>沒加分號</h2><p>分號表示 C++ 中程式碼的結尾<br>一開始在寫的時候很常會忘記<br>而這就會導致編譯器出現錯誤</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">2</span></span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;i= &quot;</span>&lt;&lt;i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>編譯接果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> g++ a.cpp</span></span><br><span class="line">a.cpp: In function &#x27;int main()&#x27;:</span><br><span class="line">a.cpp:4:5: error: expected &#x27;,&#x27; or &#x27;;&#x27; before &#x27;std&#x27;</span><br><span class="line">    std::cout&lt;&lt;&quot;i= &quot;&lt;&lt;i;</span><br><span class="line">    ^~~</span><br></pre></td></tr></table></figure><p>解決方法:<br>根據錯誤的提示內容補齊分號<br>以範例來說 std 的 前面沒有出現分號<br>所以便往 std 前面找哪裡有缺<br>發現是第三行句末缺少 補齊就可以了</p><h2 id="括號沒刮好"><a href="#括號沒刮好" class="headerlink" title="括號沒刮好"></a>括號沒刮好</h2><p>大部分人最常忘記的估計就是大括號了吧<br>常常寫到一半跳去寫另一邊 大括號就忘記補齊了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n=<span class="number">5</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i+=<span class="number">1</span>)&#123;</span><br><span class="line">    cout&lt;&lt;<span class="string">&quot;*&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>編譯接果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> g++ a.cpp</span></span><br><span class="line">a.cpp: In function &#x27;int main()&#x27;:</span><br><span class="line">a.cpp:8:1: error: expected &#x27;&#125;&#x27; at end of input</span><br><span class="line"> &#125;</span><br><span class="line"> ^</span><br></pre></td></tr></table></figure><p>解決方法:<br>根據錯誤的提示內容補齊大括號</p><h2 id="忘記宣告"><a href="#忘記宣告" class="headerlink" title="忘記宣告"></a>忘記宣告</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    hello[<span class="number">5</span>]=&#123;<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;o&#x27;</span>&#125;;</span><br><span class="line">    std::cout&lt;&lt;hello;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>編譯接果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> g++ a.cpp</span></span><br><span class="line">a.cpp: In function &#x27;int main()&#x27;:</span><br><span class="line">a.cpp:3:5: error: &#x27;hello&#x27; was not declared in this scope</span><br><span class="line">    hello[5]=&#123;&#x27;H&#x27;,&#x27;e&#x27;,&#x27;l&#x27;,&#x27;l&#x27;,&#x27;o&#x27;&#125;;</span><br><span class="line">    ^~~~~</span><br></pre></td></tr></table></figure><p>解決方法:<br>根據錯誤的提示內容宣告沒宣告的東西</p><h1 id="寫-Code-的好習慣"><a href="#寫-Code-的好習慣" class="headerlink" title="寫 Code 的好習慣"></a>寫 Code 的好習慣</h1><p>良好的習慣可以讓程式碼更容易閱讀<br>也會讓程式碼變得更容易撰寫<br>甚至還出了一本書 — 《無瑕的程式碼》<br>來教你怎麼寫出好的程式</p><h2 id="註解"><a href="#註解" class="headerlink" title="註解"></a>註解</h2><p>在撰寫程式語言的過程中<br>人們往往會在旁邊加註解<br>告訴閱讀及編寫程式碼的人員 這段程式碼式幹嘛的<br>而在 C++ 裡 我們會利用 <code>//</code> 和 <code>/**/</code> 的方式註解</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用我來做單行註解</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 用我來做多行註解</span></span><br><span class="line"><span class="comment"> * 你看到這邊都還是註解喔</span></span><br><span class="line"><span class="comment"> */</span></span><br></pre></td></tr></table></figure><h2 id="縮排"><a href="#縮排" class="headerlink" title="縮排"></a>縮排</h2><p>雖然縮排在 C 語言裡不會影響到電腦的判讀，但是身為好的工程師就必須要有<strong>好的縮排習慣</strong>(超重要!!)，除了會影響判讀以外 <del>沒縮會被其他人圍毆</del>，而且如過與到要學習 <code>Python</code> 這種超吃縮排的程式語言時，很容易會轉換不過來。<br>縮一排就按一次 <code>Tab</code>，電腦會自動輸出4個空格。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//未縮排</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">std::cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">std::cout&lt;&lt;<span class="string">&quot;a+b= &quot;</span>&lt;&lt;a+b&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//縮排</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    std::cin&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    std::cout&lt;&lt;<span class="string">&quot;a+b= &quot;</span>&lt;&lt;a+b&lt;&lt;std::endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="note warning flat"><p>要記住一點 大括號下放是邪教</p></div><h2 id="命名守則"><a href="#命名守則" class="headerlink" title="命名守則"></a>命名守則</h2><h3 id="讓名稱代表意圖"><a href="#讓名稱代表意圖" class="headerlink" title="讓名稱代表意圖"></a>讓名稱代表意圖</h3><blockquote><p>如果一個名稱還需要註解的輔助，那麼這個名稱就不具備展現意圖的能力。</p></blockquote><p>我們看看以下的命名<br>變數 <code>p</code> 沒有傳達出任何的資訊 如果你看到這種命名應該會昏倒<br>尤其是整支程式充滿許多變數 <code>p</code> 時</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> p=<span class="number">10</span>;   <span class="comment">//設定有10個人 (people)</span></span><br></pre></td></tr></table></figure><p>我們應該選擇能夠<strong>具體描述事件</strong>或者是<strong>數量單位</strong>的命名：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> year_is_lunar;</span><br><span class="line"><span class="keyword">int</span> days_sinces_creation;</span><br><span class="line"><span class="keyword">int</span> file_age_in_days;</span><br></pre></td></tr></table></figure><h3 id="避免誤導"><a href="#避免誤導" class="headerlink" title="避免誤導"></a>避免誤導</h3><p>像這種長得幾乎一模一樣的 就不要了吧</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> OwO,OnO,OuO;</span><br><span class="line"><span class="keyword">float</span> qwq,qnq,quq;</span><br><span class="line"><span class="keyword">bool</span> Oooo,oOoo,oooO;</span><br></pre></td></tr></table></figure><h3 id="產生有意義的區別"><a href="#產生有意義的區別" class="headerlink" title="產生有意義的區別"></a>產生有意義的區別</h3><p>在《無瑕的程式碼》中<br>作者也特別提出來表示「<strong>相似的變數命名會造成開發困難</strong>」</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">reports</span><br><span class="line">report_list</span><br><span class="line">the_reports</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
          <category> 基礎語法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo x Butterfly 架設網站</title>
      <link href="/post/2021/09-20/bloghexo/"/>
      <url>/post/2021/09-20/bloghexo/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近很常在爬文的時候爬到用 <code>github page</code> 架設的部落格<br>就很好奇到底怎麼弄的<br>然後就找到 <code>Hexo</code> 了</p><p>然後重點是我很常改css改到整個網頁壞掉<br>每次都要整個重弄<br>所以就有了這篇文章<br>我先把重要的東西寫出來 之後再慢慢補解說</p><h1 id="安裝Node-js"><a href="#安裝Node-js" class="headerlink" title="安裝Node.js"></a>安裝Node.js</h1><p><a href="https://nodejs.org/en/">https://nodejs.org/en/</a><br>進官網安裝</p><h1 id="安裝git"><a href="#安裝git" class="headerlink" title="安裝git"></a>安裝git</h1><p><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p><h1 id="安裝hexo"><a href="#安裝hexo" class="headerlink" title="安裝hexo"></a>安裝hexo</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h1 id="建立"><a href="#建立" class="headerlink" title="建立"></a>建立</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml</span><br><span class="line">├── package.json</span><br><span class="line">├── scaffolds</span><br><span class="line">├── source</span><br><span class="line">|   ├── _drafts</span><br><span class="line">|   └── _posts</span><br><span class="line">└── themes</span><br></pre></td></tr></table></figure><h2 id="config-yml"><a href="#config-yml" class="headerlink" title="_config.yml"></a>_config.yml</h2><p>網站 配置 檔案，您可以在此配置大部分的設定。</p><h2 id="scaffolds"><a href="#scaffolds" class="headerlink" title="scaffolds"></a>scaffolds</h2><p>鷹架 資料夾。您建立新文章時，Hexo 會根據 scaffold 來建立檔案。</p><h2 id="source"><a href="#source" class="headerlink" title="source"></a>source</h2><p>原始檔案資料夾是放置內容的地方。檔案 / 資料夾名稱開頭為 _ (底線) 和隱藏檔案會被忽略，除了 _posts 資料夾以外。Markdown 和 HTML 檔案會被處理並放到 public 資料夾，而其他檔案會被拷貝過去。</p><h2 id="themes"><a href="#themes" class="headerlink" title="themes"></a>themes</h2><p>主題 資料夾。Hexo 會根據主題來產生靜態檔案。</p><h1 id="安裝butterfly"><a href="#安裝butterfly" class="headerlink" title="安裝butterfly"></a>安裝butterfly</h1><h2 id="安裝"><a href="#安裝" class="headerlink" title="安裝"></a>安裝</h2><p>在你的 Hexo 根目錄裏</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><h2 id="應用主題"><a href="#應用主題" class="headerlink" title="應用主題"></a>應用主題</h2><p>修改<code>Hexo</code>根目錄下的<code>_config.yml</code>，把主題改為butterfly</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: butterfly</span><br></pre></td></tr></table></figure><h2 id="安裝插件"><a href="#安裝插件" class="headerlink" title="安裝插件"></a>安裝插件</h2><p>如果你沒有 pug 以及 stylus 的渲染器，請下載安裝：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h1 id="主題設定"><a href="#主題設定" class="headerlink" title="主題設定"></a>主題設定</h1><h2 id="搜索系統"><a href="#搜索系統" class="headerlink" title="搜索系統"></a>搜索系統</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: false</span><br></pre></td></tr></table></figure><h2 id="字數統計"><a href="#字數統計" class="headerlink" title="字數統計"></a>字數統計</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">wordcount:</span><br><span class="line">  enable: true</span><br><span class="line">  post_wordcount: true</span><br><span class="line">  min2read: true</span><br><span class="line">  total_wordcount: true</span><br></pre></td></tr></table></figure><h1 id="部屬"><a href="#部屬" class="headerlink" title="部屬"></a>部屬</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/&lt;username&gt;/&lt;username&gt;.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">echo</span> 開始部署</span><br><span class="line">hexo generate &amp; hexo clean &amp; hexo deploy</span><br></pre></td></tr></table></figure><h1 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h1>]]></content>
      
      
      <categories>
          
          <category> 網站架設 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> Github </tag>
            
            <tag> Hexo </tag>
            
            <tag> 網站 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9/15 資訊課後小考</title>
      <link href="/post/2021/09-15/210915test/"/>
      <url>/post/2021/09-15/210915test/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>相信這堂資訊課下來大部分的同學都很茫<br>畢竟上次學寫程式是高一的事情了<br>而且還是怡松上課 估計有上跟沒上一樣<br>更何況卓宜青老師上課速度我覺得快得跟鬼一樣</p><p>我這篇就先針對課後小考檢討<br>盡量讓大家看得懂<br>之後可能還會再補充今天這堂課的觀念</p><h1 id="題目檢討"><a href="#題目檢討" class="headerlink" title="題目檢討"></a>題目檢討</h1><h2 id="第一題"><a href="#第一題" class="headerlink" title="第一題"></a>第一題</h2><blockquote><p>下列何者不屬於 C++ 保留字</p></blockquote><ul><li>char</li><li>float</li><li>break</li><li>sum</li></ul><p><code>char</code>用來宣告字元變數<br><code>float</code>用來宣告有小數點的變數<br><code>break</code>他會中止包在外層的(最接近) while , do while , for , 或 switch 語句<br>接著執行終止的語句在下方的程式碼</p><h2 id="第二題"><a href="#第二題" class="headerlink" title="第二題"></a>第二題</h2><blockquote><p>何者為下列運算式表示法?</p></blockquote><ul><li>h+1/w/w</li><li>(h+1)/(w*w)</li><li>h+1/(w*2)</li><li>(h+1)/w*2</li></ul><p>題目要問的是 h+1 除以 w 的平方<br>在<code>C++</code>裡面<br>除法用的是<code>/</code> 乘法用的是<code>*</code><br>而 W 的平方可以寫成 w × w 也就是<code>w*w</code><br>然後先乘除後加減<br>自然就寫成 <code>(h+1)/(w*w)</code></p><h2 id="第三題"><a href="#第三題" class="headerlink" title="第三題"></a>第三題</h2><blockquote><p>下列何者不屬於C++邏輯運算子?</p></blockquote><ul><li>!</li><li>&amp;&amp;</li><li>||</li><li>==</li></ul><p><code>!</code>、<code>&amp;&amp;</code>和<code>||</code>皆屬於 <strong>邏輯運算子</strong><br>而<code>==</code>則是比較運算子</p><h2 id="第四題"><a href="#第四題" class="headerlink" title="第四題"></a>第四題</h2><blockquote><p>下列何種資料型態佔的記憶體最小?</p></blockquote><ul><li>float</li><li>char</li><li>int</li></ul><p>char: 8位元<br>float: 6有效位元<br>int: 16位元</p><h2 id="第五題"><a href="#第五題" class="headerlink" title="第五題"></a>第五題</h2><blockquote><p>設x=10,y=10下列比較運算結果和者不為真?</p></blockquote><ul><li>x!=y</li><li>x*2==20</li><li>x==y</li><li>x&lt;=y</li></ul><p>第一個選項中的<code>!=</code>是<code>≠</code>的意思所以結果為<code>true</code><br>第二個選項要先把 x*2 算出來 也就是 20 再去比較<br>比較運算子中的<code>==</code>是數學符號中的<code>=</code><br>算完後 20 = 20 結果為<code>true</code><br>第三個選項 10不等於20吧…<br>很明顯錯 結果為<code>false</code><br>第四個選項 <code>&lt;=</code>是數學符號中的<code>≦</code><br>x&lt;20 所以結果為<code>false</code></p><h2 id="第六題"><a href="#第六題" class="headerlink" title="第六題"></a>第六題</h2><blockquote><p>下列哪一個選項會讓運算式 a%2==1 || b&lt;0 || c&gt;0 ?</p></blockquote><ul><li>a=3, b=-1, c=1</li><li>a=2, b=1, c=-1</li><li>a=3, b=-1, c=-2</li><li>a=3, b=4, c=5</li></ul><p>首先我們來看看or的真值表<br>|x|否|是|<br>|:—:|:—:|:—:|<br>|否|否|是|<br>|是|是|是|<br>可以發現<code>OR</code>只要一個值為<code>是</code>其他輸出的都會是<code>是</code><br>那這就簡單了 我們只要找出那個全部都不正確的就好了<br>每個選項都帶進去後會發現 只有第二個選項全錯</p><h2 id="第七題"><a href="#第七題" class="headerlink" title="第七題"></a>第七題</h2><blockquote><p>以下和著為「被2整除，但不能被3整除的所有整數n」的條件式?</p></blockquote><ul><li>n%2 == 0 &amp;&amp; n%3 != 0</li><li>n/2 == 0 &amp;&amp; n/3 != 0</li><li>n%2 == 0 || n%3 != 0</li><li>n/2 == 0 || n/3 != 0</li></ul><p>如何判斷是否被整除?<br>看有沒有餘數 我們都知道<code>C++</code>裡面的<code>%</code>就是取餘數的<br>被2整除指的是<code>n%2 == 0</code><br>而被3整除指的是<code>n%3 == 0</code><br>所以被2整除，但不能被3整除就是<code>n%2 == 0 &amp;&amp; n%3 != 0</code></p><h2 id="第八題"><a href="#第八題" class="headerlink" title="第八題"></a>第八題</h2><blockquote><p>下列程式碼執行的結果?</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> a, b;</span><br><span class="line">   a=<span class="number">450</span>;</span><br><span class="line">   b=<span class="number">200</span>;</span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;a/b=&quot;</span>&lt;&lt;a/b&lt;&lt;endl;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>這題基本上順著程式碼就可以算出a/b<br>只不過要注意的是第8行<code>cout&lt;&lt;&quot;a/b=&quot;&lt;&lt;a/b&lt;&lt;endl;</code><br>在打出 a/b 的結果之前要先打<code>a/b=</code>再打 a/b 的結果</p></blockquote><h2 id="第九題"><a href="#第九題" class="headerlink" title="第九題"></a>第九題</h2><blockquote><p>下列程式碼執行的結果?</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> x=<span class="number">10</span>, y=<span class="number">20</span>;</span><br><span class="line">   x=y;</span><br><span class="line">   y=x;</span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;x=&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;y=&quot;</span>&lt;&lt;y&lt;&lt;endl;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>這一題除了跟上一題一樣的小細節以外<br>要注意一下程式碼的流程<br>在第6行的時候<code>x</code>已經被賦予<code>y</code>的值了 也就是 20<br>所以在下一行<code>y</code>賦予 的值時<code>y</code>被賦予的就是 20</p></blockquote><h2 id="第十題"><a href="#第十題" class="headerlink" title="第十題"></a>第十題</h2><blockquote><p>下列程式碼執行的結果?</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">   <span class="keyword">int</span> x=<span class="number">1</span>, y=<span class="number">2</span>, z;</span><br><span class="line">   z=x;</span><br><span class="line">   x=y;</span><br><span class="line">   y=z</span><br><span class="line">   cout&lt;&lt;<span class="string">&quot;x=&quot;</span>&lt;&lt;x&lt;&lt;<span class="string">&quot;y=&quot;</span>&lt;&lt;y&lt;&lt;endl;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure></blockquote><p>這一題…<br>第六行的時候<code>z</code>被賦予的<code>x</code>的值 <code>x</code> <code>z</code>都是2<br>下一行 <code>x</code>被賦予了<code>y</code>的值也就是2<br>此時的<code>x=2</code>,<code>y=2</code>,<code>z=1</code><br>第八行 最終<code>y</code>被賦予了<code>z</code>的值<br>所以此時<code>x=2</code>,<code>y=1</code><br>仔細看的話<br>這個題目其實是在告訴你程式碼如何把兩個變數的值對調<br>高一時教的<code>氣泡排序法</code>就有使用到這段</p><h1 id="最後"><a href="#最後" class="headerlink" title="最後"></a>最後</h1><p>這次檢討就到這邊啦<br>雖然估計不會有什麼人看</p><p>有問題的話我能幫到的我會盡量幫<br>但不要像盛文考試問我答案:(</p>]]></content>
      
      
      <categories>
          
          <category> 課後小考檢討 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> C++ </tag>
            
            <tag> 成德高中 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>b004. 一個都不能少</title>
      <link href="/post/2021/09-15/zj_b004/"/>
      <url>/post/2021/09-15/zj_b004/</url>
      
        <content type="html"><![CDATA[<h1 id="b004-一個都不能少"><a href="#b004-一個都不能少" class="headerlink" title="b004: 一個都不能少"></a>b004: 一個都不能少</h1><h2 id="題目"><a href="#題目" class="headerlink" title="題目"></a>題目</h2><p>進德女子監獄座落於自由女中旁，是間作風開放的監獄，每到中午時間便會放風讓收容人到外面用餐。當然還是會有人逾時不歸，身為管理者的美惠，每天總是要為哪些人沒有回來而傷透腦筋。現在想請你寫一個程式，幫助美惠找出哪些人沒有回來。</p><p>輸入說明：<br>一開始有兩個正整數 N、M (0&lt;=M&lt;N&lt;=20)，N 代表收容人的人數(編號從 1 到 N)，M 代表回來的人數，接下來有 M 個正整數，分別代表這 M 位已經回來的收容人編號(不用考慮編號超出範圍或其他錯誤)。</p><h2 id="解題方向"><a href="#解題方向" class="headerlink" title="解題方向"></a>解題方向</h2><p>我覺得這一題我的解法算笨<br>我想說直接把犯人編號當陣列的索引用<br>然後在回來的編號裡面放值<br>最後再去檢查</p><p>應該還可以再精簡一點<br>感覺有些程式碼有點多餘<br>不過我懶得改:P</p><h2 id="範例程式碼"><a href="#範例程式碼" class="headerlink" title="範例程式碼"></a>範例程式碼</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> back[<span class="number">22</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> out[<span class="number">22</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> N,M;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">is_out</span><span class="params">(<span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  cin&gt;&gt;N&gt;&gt;M;</span><br><span class="line">  <span class="keyword">int</span> outNum=N-M;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;M;i++)&#123;</span><br><span class="line">    cin&gt;&gt;temp;</span><br><span class="line">    back[temp]=temp;</span><br><span class="line">    temp=<span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=N;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(back[i]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">      out[i]=<span class="number">0</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      out[i]=i;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">22</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(out[i]==<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      cout&lt;&lt;out[i]&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 解題紀錄 </category>
          
          <category> ZeroJudge </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> ZeroJudge </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Windows終端機美化</title>
      <link href="/post/2021/09-12/wt/"/>
      <url>/post/2021/09-12/wt/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>身為 Windows 的用戶<br>在軟體或網頁開發的時候 多多少少會用到 <code>shell</code><br>可是 Windows 本身的 <code>shell</code> …老實說很醜<br>不過近年來 Windows 推出 <code>Windows Terminal</code><br>也有了跟 <code>Linux</code> 系統上與 <code>oh my zsh</code> 相似的 <code>oh my posh</code><br>讓 Windows 也可以美化了</p><span id="more"></span><h1 id="Windows終端機美化"><a href="#Windows終端機美化" class="headerlink" title="Windows終端機美化"></a>Windows終端機美化</h1><h2 id="Windows-Terminal-安裝"><a href="#Windows-Terminal-安裝" class="headerlink" title="Windows Terminal 安裝"></a>Windows Terminal 安裝</h2><p>打開 Microsoft store<br>搜尋 <code>terminal</code></p><p><img src="https://i.imgur.com/l92sQP9.jpg"></p><p>接著就直接安裝就可以了</p><h2 id="Oh-My-Posh-安裝"><a href="#Oh-My-Posh-安裝" class="headerlink" title="Oh My Posh 安裝"></a>Oh My Posh 安裝</h2><p>打開 <code>PowerShell</code> 依序輸入兩行指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Install-Module posh-git -Scope CurrentUser</span><br><span class="line"></span><br><span class="line">Install-Module oh-my-posh -Scope CurrentUser</span><br></pre></td></tr></table></figure><blockquote><p>問題全選 <code>是</code></p></blockquote><p>接著設定自動套用，在 PowerShell 上輸入 $PROFILE ，依序輸入下列兩行指令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (!(Test-Path -Path $PROFILE )) &#123; New-Item -Type File -Path $PROFILE -Force&#125;</span><br><span class="line">notepad $PROFILE</span><br></pre></td></tr></table></figure><p>接著再打開的記事本裡貼上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Import-Module posh-git</span><br><span class="line">Import-Module oh-my-posh</span><br><span class="line">Set-PoshPrompt Paradox</span><br></pre></td></tr></table></figure><p>儲存後就完成了</p><p>若出現下圖錯誤</p><p><img src="https://i.imgur.com/Xq93rQ0.png"></p><p>則輸入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure><h2 id="Nerd-Font-字形安裝"><a href="#Nerd-Font-字形安裝" class="headerlink" title="Nerd Font 字形安裝"></a>Nerd Font 字形安裝</h2><p>Oh My Posh 這個套件是設計成要用 <a href="https://www.nerdfonts.com/"><code>Nerd Font</code></a> 的<br>而且 <a href="https://www.nerdfonts.com/"><code>Nerd Font</code></a> 也是以包含許多icon聞名<br>這邊我們用作者推薦的 <a href="https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/Meslo.zip"><code>Meslo LGM NF</code></a><br>下載並安裝完字體後<br>回到 Windows終端機 點開設定</p><p><img src="https://i.imgur.com/ypV2Wh2.png"></p><p>點開json檔案</p><p><img src="https://i.imgur.com/rbRMVkr.png"></p><p>把 <code>fontFace</code> 修改成要的字體名稱</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">&quot;profiles&quot;</span>:</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">&quot;defaults&quot;</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">&quot;fontFace&quot;</span>: <span class="string">&quot;MesloLGM Nerd Font&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="主題更改"><a href="#主題更改" class="headerlink" title="主題更改"></a>主題更改</h2><p><a href="https://terminalsplash.com/">https://terminalsplash.com/</a><br>這裡面有很多顏色主題主題可以選擇<br>更改的方式也是要到json檔案裡面改<br>這邊我就不多做說明了</p><h2 id="Oh-My-Posh主題更改"><a href="#Oh-My-Posh主題更改" class="headerlink" title="Oh My Posh主題更改"></a>Oh My Posh主題更改</h2><p>利用下列指令查看所有主題</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-PoshThemes</span><br></pre></td></tr></table></figure><p>接著輸入下列指令去更改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Set-PoshPrompt -Theme &lt;主題名稱&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GNU開發 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
            <tag> 終端機 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POPCAT 自動連點器</title>
      <link href="/post/2021/08-18/popcat/"/>
      <url>/post/2021/08-18/popcat/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>近期Pop cat風靡全球 大家都想拿到第一名<br>什麼是Pop cat? 這就要從一隻可愛的貓說起</p><blockquote><p>Popcat風潮來自推特上一段爆紅的貓咪影片 這隻名為Oatmeal的貓咪正在向主人Xavier撒嬌 嘴巴一開一合的 樣子非常可愛<br>Xavier也把Oatmeal的圖片做成gif圖 後來被他的朋友PO到Reddit論壇上 突然爆紅 被歐美網友們做成各式各樣的迷因（meme） 搭配上「POP」的音效<br>-數位時代。檢自<a href="https://www.bnext.com.tw/article/64440/popcat-click-competition-janis">https://www.bnext.com.tw/article/64440/popcat-click-competition-janis</a> (2021/08/19)</p></blockquote><blockquote class="twitter-tweet"><p lang="en" dir="ltr">So there&#39;s a video with some images of my cat Oatmeal out and here&#39;s the full clip of him chirping at a bug. <a href="https://t.co/4MVTWiIknc">pic.twitter.com/4MVTWiIknc</a></p>&mdash; Xavier (@XavierBFB) <a href="https://twitter.com/XavierBFB/status/1315184155274211329?ref_src=twsrc%5Etfw">October 11, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>我那時就想 一直點一直點手很酸 國外也有人用連點器 (物理)<br>那為什麼我不來試看看用程式寫<br>然後又剛好看到 Youtube 上的 Selenium 教學<br>剛好可以讓我寫出連點器 於是便著手編寫了</p><h1 id="Selenium"><a href="#Selenium" class="headerlink" title="Selenium"></a>Selenium</h1><blockquote><p>Selenium 是一個綜合性的項目，為web瀏覽器的自動化提供了各種工具和依賴包</p></blockquote><p>要在 Python 中使用 Selenium 要先安裝它的套件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pip install selenium</span></span><br></pre></td></tr></table></figure><p>然後要安裝對應的 WebDriver 才能讓它在瀏覽器上面跑<br>這邊就用 Chrome (<a href="https://sites.google.com/a/chromium.org/chromedriver/downloads">網址</a>)<br>記得要挑對版本下載<br>下載完後把他丟到程式檔案的同一個資料夾就可以了</p><h1 id="程式碼"><a href="#程式碼" class="headerlink" title="程式碼"></a>程式碼</h1><p>Github:  <a href="https://github.com/yuuto-0226/popcat_autoclick">連結</a></p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">PATH = <span class="string">&quot;./chromedriver.exe&quot;</span></span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome(PATH)</span><br><span class="line"></span><br><span class="line">driver.get(<span class="string">&quot;https://popcat.click/&quot;</span>)</span><br><span class="line">neko = driver.find_element_by_id(<span class="string">&quot;app&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 隨機點擊次數及休息時間</span></span><br><span class="line">click_random = <span class="built_in">int</span>(random.random()*<span class="number">500</span>)</span><br><span class="line">sec_random = <span class="built_in">int</span>(random.random()*<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">c = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> c &lt; <span class="number">1</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(click_random):</span><br><span class="line">        neko.click()</span><br><span class="line">    time.sleep(sec_random)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 作品 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hack Life </tag>
            
            <tag> Python </tag>
            
            <tag> 網路爬蟲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二進位制 &amp; 邏輯閘實作</title>
      <link href="/post/2021/06-16/logic-gate/"/>
      <url>/post/2021/06-16/logic-gate/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>我們都知道在 C++ 裡面<br>如過要實現加法的話可以寫成</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b=<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">a+b;</span><br></pre></td></tr></table></figure><p>答案理所當然會是 3<br>雖然我們是用 C++ 去編寫的<br>但是電腦執行的卻是編譯過的機械碼<br>繞我不禁好奇，電腦是如何進行加法的 ?<br>不是透過寫程式碼讓他編譯，而是最原始的方法<br>單純的電子訊號，也就是 0 和 1</p><h1 id="二進位制"><a href="#二進位制" class="headerlink" title="二進位制"></a>二進位制</h1><p><code>5+5</code> ，只要有好好學過數學的人都應該會知道答案是 10<br>這種進位制即是大家最熟悉的 <code>10 進位制</code> ，也就是當數字加到 10 時要進一位<br><code>2 進位制</code> 也是一樣的概念，當數字加到 2 時要進一位<br>舉例來說 <code>1+1</code> 的答案就會是 10</p><p><code>2 進位制</code> 廣泛被運用在電腦上面，而一個數字也被稱作位元</p><h1 id="邏輯閘"><a href="#邏輯閘" class="headerlink" title="邏輯閘"></a>邏輯閘</h1><p>邏輯閘是在積體電路上的基本組件。這些電晶體的組合可以使代表兩種訊號的高低電平在通過它們之後產生高電平或者低電平的訊號。高、低電平可以分別代表邏輯上的「真」與「假」或二進位當中的1和0，從而實現邏輯運算。常見的邏輯閘包括與閘，或閘，非閘，互斥或閘（也稱：互斥或）等等。(<a href="https://zh.wikipedia.org/wiki/%E9%82%8F%E8%BC%AF%E9%96%98">維基百科</a>)</p><h2 id="AND"><a href="#AND" class="headerlink" title="AND"></a>AND</h2><table><thead><tr><th>\</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>0</td></tr><tr><td>0</td><td>0</td><td>0</td></tr></tbody></table><h2 id="OR"><a href="#OR" class="headerlink" title="OR"></a>OR</h2><table><thead><tr><th>\</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td></tr><tr><td>0</td><td>1</td><td>0</td></tr></tbody></table><h2 id="XOR"><a href="#XOR" class="headerlink" title="XOR"></a>XOR</h2><table><thead><tr><th>\</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>0</td></tr></tbody></table><h1 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h1><p>這次的實作是參考 <a href="https://www.youtube.com/channel/UCS0N5baNlQWJCUrhCEo8WlA">Ben Eater</a> 的 <a href="https://www.youtube.com/watch?v=wvJc9CZcvBc">Learn how computers add numbers and build a 4 bit adder circuit</a></p><p>影片透過觀察 <code>2進位制</code> 加法 的規律，歸納出了以下電路圖</p><p><img src="https://i.imgur.com/6cbLa4f.png"></p><p>知道要怎麼接之後就簡單了<br>剩下的就只是把它實做出來而已<br>成品長這樣</p><p><img src="https://i.imgur.com/caBdKaA.jpg"></p><p>01001 + 01100 的結果為 10101<br>和實際操作的結果一樣</p><p><img src="https://i.imgur.com/SK9QZdl.jpg"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 筆記 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
